Using a member-posting forum
============================

Test starting conversations, replying and modifying comments in a default
member-posting forum.

First, some set-up:
    
    >>> from Products.Five import zcml
    >>> import Products
    >>> zcml.load_config('configure.zcml', package=Products.Ploneboard)
    
    >>> from Products.Ploneboard.tests import utils
    >>> utils.setUpDefaulMembersBoardAndForum(self)

    >>> from Products.Five.testbrowser import Browser
    >>> browser = Browser()
    >>> browser.handleErrors = False
    
Let us log all exceptions, which is useful for debugging. Also, clear portlet
slots, to make the test browser less confused by things like the recent portlet
and the navtree.

    >>> self.portal.error_log._ignored_exceptions = ()
    >>> self.portal.left_slots = self.portal.right_slots = []

Verify that the forum is indeed a member-posting one by default and log in:

    >>> self.portal.portal_workflow.getInfoFor(self.forum, 'review_state')
    'memberposting'

    >>> browser.open(self.portal.absolute_url() + '/login_form')
    >>> browser.getControl('Login Name').value = 'member1'
    >>> browser.getControl('Password').value = 'secret'
    >>> browser.getControl('Log in').click()

View forum
----------

The forum created behind the scenes should now be shown here.

    >>> browser.open(self.board.absolute_url())
    >>> browser.contents
    '...Forum 1...'

If we go to the forum, there are no conversations shown.

    >>> browser.getLink('Forum 1').click()
    >>> browser.contents
    '...No conversations in this forum yet...'

Add a new conversation
----------------------

Now we can add a new conversation. We set a title and some body text. The body
text can contain HTML as well.

    >>> browser.getControl('Start a new Conversation').click()
    >>> browser.url
    '.../add_conversation_form...'
    >>> browser.getControl('Title').value = 'New title'
    >>> browser.getControl('Body text').value = 'Some <b>body</b> text'
    
We have attachment buttons, although we won't upload anything now.
    
    >>> browser.getControl(name='files:list', index=0)
    <Control name='files:list' type='file'>
    
Submit the form, and we should be returned to the forum view. The conversation
should exist, and we should be able to view it.

    >>> browser.getControl(name='form.button.Post').click()
    >>> browser.url.startswith(self.forum.absolute_url() + '?')
    True
    >>> conversation = self.forum.getConversations()[0]
    >>> hasattr(conversation, '__fallback_traverse__')
    True
    
    >>> link = browser.getLink(url='/%s' % conversation.getId())
    >>> link.click()

Add comment to own comment
--------------------------

Add a comment to our own comment. Use the quick-reply field first.

    >>> browser.getControl(name='text').value = 'A quick reply'
    >>> browser.getControl(name='form.button.Post').click()
    >>> browser.url.startswith(conversation.absolute_url())
    True
    >>> browser.contents
    '...A quick reply...'
    
Then add a full reply.

    >>> browser.getControl('Reply', index=0).click()
    >>> browser.url
    '.../add_comment_form...'
    >>> browser.getControl(name='text').value = 'A full reply'

Although we won't add attachments in this test, at least make sure the button
is there:
    
    >>> browser.getControl(name='files:list', index=0)
    <Control name='files:list' type='file'>
    
Submit and make sure we go back to the conversation
    
    >>> browser.getControl(name='form.button.Post').click()
    >>> browser.url.startswith(conversation.absolute_url())
    True
    >>> browser.contents
    '...A full reply...'
    
Edit own comment
----------------

A member cannot edit his own comment - no changing of history! Verify that there
is no 'Edit' button present.

    >>> browser.getControl('Edit', index=0)
    Traceback (most recent call last):
    ...
    LookupError: label 'Edit'

Delete a comment
----------------

A member cannot delete his own comment. Verify that there is no 'Delete' button
present.

    >>> browser.getControl('Delete')
    Traceback (most recent call last):
    ...
    LookupError: label 'Delete'


Delete a conversation
---------------------

If a user *could* delete his own posts, deleting the first post should also
delete the conversation. Since that is not enabled in this type of forum, it
is not verified here.

Workflow actions
-----------------

Workflow actions appear for operations like publish or retract. Members should
see no such actions in this type of forum, however, since their posts are 
automatically published.

    >>> browser.getControl('Submit')
    Traceback (most recent call last):
    ...
    LookupError: label 'Submit'
    >>> browser.getControl('Publish')
    Traceback (most recent call last):
    ...
    LookupError: label 'Publish'
    >>> browser.getControl('Retract')
    Traceback (most recent call last):
    ...
    LookupError: label 'Retract'
    >>> browser.getControl('Reject')
    Traceback (most recent call last):
    ...
    LookupError: label 'Reject'
    

View other member's comment
---------------------------

Log in as another member

    >>> browser.open('%s/logged_out' % self.portal.absolute_url())
    >>> browser.open('%s/login_form' % self.portal.absolute_url())
    >>> browser.getControl(name='__ac_name').value = 'member2'
    >>> browser.getControl(name='__ac_password').value = 'secret'
    >>> browser.getControl('Log in').click()

Find the forum, and go to the new post.

    >>> browser.open(self.forum.absolute_url())
    >>> browser.getLink(url='/%s' % conversation.getId()).click()

Add reply to other member's comment
-----------------------------------

Add a new comment. Use the quick-reply field first.

    >>> browser.getControl(name='text').value = 'Another quick reply'
    >>> browser.getControl(name='form.button.Post').click()
    >>> browser.url.startswith(conversation.absolute_url())
    True
    >>> browser.contents
    '...Another quick reply...'
    
Then add a full reply.

    >>> browser.getControl('Reply', index=0).click()
    >>> browser.url
    '.../add_comment_form...'
    >>> browser.getControl(name='text').value = 'Another full reply'

Although we won't add attachments in this test, at least make sure the button
is there:
    
    >>> browser.getControl(name='files:list', index=0)
    <Control name='files:list' type='file'>
    
Submit and make sure we go back to the conversation
    
    >>> browser.getControl(name='form.button.Post').click()
    >>> browser.url.startswith(conversation.absolute_url())
    True
    >>> browser.contents
    '...Another full reply...'

View as reviewer
----------------

Log in as a reviewer.

    >>> browser.open('%s/logged_out' % self.portal.absolute_url())
    >>> browser.open('%s/login_form' % self.portal.absolute_url())
    >>> browser.getControl(name='__ac_name').value = 'reviewer1'
    >>> browser.getControl(name='__ac_password').value = 'secret'
    >>> browser.getControl('Log in').click()

Find the forum, and go to the new post.

    >>> browser.open(self.forum.absolute_url())
    >>> browser.getLink(url='/%s' % conversation.getId()).click()

The moderation queue form is not shown since this is not a moderated forum.

    >>> browser.open(self.forum.absolute_url())
    >>> 'moderation_form' in browser.contents
    False
    
The moderation queue form is not shown since this is not a moderated forum.

    >>> browser.open(self.forum.absolute_url())
    >>> 'moderation_form' in browser.contents
    False
    
It is, however, shown at the root board, since that aggregates all forums. Make
sure it is empty.

    >>> browser.open(self.board.absolute_url())
    >>> browser.getLink('Moderate').click()
    >>> browser.contents
    '...There are no comments in the moderation queue...'
    >>> conversation.getId() in browser.contents
    False
    
The reviewer cannot edit or delete any comments.

    >>> browser.open(conversation.absolute_url())

    >>> browser.getControl('Delete')
    Traceback (most recent call last):
    ...
    LookupError: label 'Delete'
    >>> browser.getControl('Edit')
    Traceback (most recent call last):
    ...
    LookupError: label 'Edit'
    
However, a reviewer can retract a comment:
    
    >>> # TODO: Test retract

View as manager
---------------

Log in as a manager.

    >>> browser.open('%s/logged_out' % self.portal.absolute_url())
    >>> browser.open('%s/login_form' % self.portal.absolute_url())
    >>> browser.getControl(name='__ac_name').value = 'manager1'
    >>> browser.getControl(name='__ac_password').value = 'secret'
    >>> browser.getControl('Log in').click()

Find the forum, and go to the new post.

    >>> browser.open(self.forum.absolute_url())
    >>> browser.getLink(url='/%s' % conversation.getId()).click()

A manager can edit and delete comments, as well as apply workflow transitions.

    >>> # TODO: Test edit, delete, workflow

Locking a conversation
----------------------

Lock a conversation, and ensure that reply buttons do not appear.

    >>> browser.getLink('Lock').click()
    >>> browser.getControl(name='form.button.Post')
    Traceback (most recent call last):
    ...
    LookupError: name 'form.button.Post'
    >>> browser.getControl('Reply', index=0)
    Traceback (most recent call last):
    ...
    LookupError: label 'Reply'

Verify that they do not appear as a regular member either.

    >>> browser.open('%s/logged_out' % self.portal.absolute_url())
    >>> browser.open('%s/login_form' % self.portal.absolute_url())
    >>> browser.getControl(name='__ac_name').value = 'member1'
    >>> browser.getControl(name='__ac_password').value = 'secret'
    >>> browser.getControl('Log in').click()
    >>> browser.open(self.forum.absolute_url())
    >>> browser.getLink(url='/%s' % conversation.getId()).click()
    
    >>> browser.getControl(name='form.button.Post')
    Traceback (most recent call last):
    ...
    LookupError: name 'form.button.Post'
    >>> browser.getControl('Reply', index=0)
    Traceback (most recent call last):
    ...
    LookupError: label 'Reply'
    
View as anonymous
-----------------

Log out, and ensure the post can be viewed by anonymous.

    >>> browser.open('%s/logged_out' % self.portal.absolute_url())
    >>> browser.open(self.board.absolute_url())
    >>> browser.getLink('Forum one').click()
    >>> browser.getLink(url='/%s' % conversation.getId()).click()
    >>> browser.contents
    '...Another full reply...'
